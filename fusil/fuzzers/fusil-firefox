#!/usr/bin/env python
"""
HTTP server serving fuzzy JPEG image or Flash animation.

Project is currently specific to Firefox on Linux.
"""
from __future__ import with_statement

HOST = '0.0.0.0'
PORT = 8080
NB_FILES = 12
ROWS = 6
MAX_MEMORY = 0
HTML_REFRESH_TIMEOUT = 2.0

from fusil.application import Application
from optparse import OptionGroup
from fusil.file_tools import filenameExtension
from fusil.network.http_server import HttpServer
from fusil.process.create import CreateProcess
from fusil.process.watch import WatchProcess
from fusil.process.tools import runCommand
from fusil.project_agent import ProjectAgent
from fusil.auto_mangle import AutoMangle
from fusil.dummy_mangle import DummyMangle
from datetime import datetime
from time import time
from fusil.x11 import sendKey, getDisplay, findWindowByNameRegex
from Xlib.keysymdef.miscellany import XK_F5
import re
from os.path import basename, exists, dirname
from os import getenv
from mimetypes import guess_type

IMAGE_TEMPLATE = '<img src="%(url)s" alt="%(text)s">'
EMBEDED_TEMPLATE = '<embed src="%(url)s" name="%(text)s" type="%(mime)s"></embed>'
IFRAME_TEMPLATE = '<iframe sandbox src="%(url)s" name="%(text)s" width="250px" height="450px"></iframe>'

FILE_EXTENSIONS = {
    # Imaged
    '.bmp': ('image/x-ms-bmp', IMAGE_TEMPLATE),
    '.gif': ('image/gif', IMAGE_TEMPLATE),
    '.ico': ('image/x-ico', IMAGE_TEMPLATE),
    '.jpg': ('image/jpeg', IMAGE_TEMPLATE),
    '.jpeg': ('image/jpeg', IMAGE_TEMPLATE),
    '.png': ('image/png', IMAGE_TEMPLATE),

    # Embeded
    '.svg': ('image/svg+xml', EMBEDED_TEMPLATE),
    '.swf': ('application/x-shockwave-flash', EMBEDED_TEMPLATE),

    # XML
    '.xml': ('text/xml', IFRAME_TEMPLATE),
    '.html': ('text/html', IFRAME_TEMPLATE),
    '.rdf': ('text/xml', IFRAME_TEMPLATE),
}

class Fuzzer(Application):
    NAME = "firefox"
    USAGE = "%prog [options] filename"
    NB_ARGUMENTS = 1

    def createFuzzerOptions(self, parser):
        options = OptionGroup(parser, "Firefox")
        options.add_option("--browser", help="browser to fuzz (eg. firefox)",
            type=str, default="firefox")
        options.add_option("--test", help="Test mode (no fuzzing, just make sure that the fuzzer works)",
            action="store_true")
        options.add_option("--port", help="TCP port using to listen on (default: %s)" % PORT,
            type="int", default=PORT)
        options.add_option("--nb-files", help="Number of generated files (default: %s)" % NB_FILES,
            type="int", default=NB_FILES)
        options.add_option("--rows", help="Number of HTML table rows (default: %s)" % ROWS,
            type="int", default=ROWS)
        options.add_option("--max-memory", help="Maximum memory in bytes (default: %s)" % MAX_MEMORY,
            type="int", default=MAX_MEMORY)
        return options

    def setupProject(self):
        project = self.project
        homepage_url = "http://%s:%s/" % (HOST, self.options.port)
        self.error("HTTP fuzzer homepage: %s" % homepage_url)

        arguments = [self.options.browser, '-safe-mode', homepage_url]
        #firefox = FirefoxProcess(project, arguments, timeout=None)
        # Firefox forks many times
        #firefox.max_user_process = 50
        # On core dump, Firefox proposes to start a debugger
        # whereas the user is unable to answer to this question...
        # Possible workaround: close stdin?
        #firefox.core_dump = False
        #firefox.setupX11()
        #firefox.max_memory = self.options.max_memory
        #WatchProcess(firefox, default_score=1.0)

        orig_filename = self.arguments[0]
        filename_ext = filenameExtension(orig_filename)
        if self.options.test:
            DummyMangle(project, orig_filename, nb_file=self.options.nb_files)
        else:
            man = AutoMangle(project, orig_filename, nb_file=self.options.nb_files, ext=filename_ext, nofile=True)
            #man.aggressivity = 0.25
        FuzzyHttpServer(project, self.options, orig_filename, filename_ext, rows=self.options.rows)

class FirefoxProcess(CreateProcess):
    def on_project_start(self):
        CreateProcess.init(self)
        self.error("Start Firefox...")
        self.createProcess()
        self.error("Start Firefox... done")

    def on_project_done(self):
        CreateProcess.deinit(self)

    def init(self):
        if 1 < self.project().session_index:
            self.send('process_create', self)

    def deinit(self):
        pass

class HtmlPage:
    def __init__(self):
        self.title = None
        self.headers = []
        self.body = ''

    def __str__(self):
        jsreload = """<script language="JavaScript">
        var sURL = unescape(window.location.pathname);
        function doLoad()
        {
            setTimeout( "refresh()", 3*1000 );
        }
        function refresh()
        {
            window.location.href = sURL;
        }
        </script>
        """
        html = ['<html>\n']
        if self.title or self.headers:
            html.append('<head>\n')
            if self.title:
                html.append('<title>%s</title>\n' % self.title)
            #html.append('<meta http-equiv="refresh" content="3"/>\n')
            html.append('%s' % jsreload)
            html.append('  </head>\n')
        html.append('<body onload="doLoad()">\n')
        html.append(self.body+"\n")
        html.append('</body>\n')
        html.append('</html>\n')
        return ''.join(html)

class FuzzyHttpServer(HttpServer):
    def __init__(self, project, options, filename, filename_ext, rows=5):
        HttpServer.__init__(self, project, options.port)
        self.options = options
        self.directory = dirname(filename)
        if not self.directory:
            self.directory = "."
        if filename_ext:
            ext = filename_ext.lower()
        else:
            ext = None
        try:
            self.content_type, self.file_html_format = FILE_EXTENSIONS[ext]
        except KeyError:
            raise ValueError("Unknown file extension: %r" % filename_ext)
        self.file_url_format = "file-%u-%u" + ext
        self.file_url_match = re.compile("file-[0-9]+-([0-9]+)" + re.escape(ext)).match
        self.timeout = HTML_REFRESH_TIMEOUT
        self.rows = rows

    def init(self):
        HttpServer.init(self)
        self.pages = set()
#        self.filenames = tuple()
        self.filenames = None
        self.is_done = False
        self.done_at = None

    def on_mangle_filenames(self, filenames):
        self.filenames = filenames
        self.send('http_server_ready')

    def serveRequest(self, client, request):
        try:
            url = request.uri[1:]
            if not url:
                url = "index.html"

            page = url
            self.error("Serve URL=%r" % url)
            match = self.file_url_match(url)
            if match:
                try:
                    file_index = int(match.group(1))
                    filename = self.filenames[file_index]
                    data = open(filename, 'rb').read()
                    self.serveData(client, 200, "OK", data=data, content_type=self.content_type)
                except:
                    self.createHomepage(client)
            elif exists(self.directory + "/" + url):
                self.serveData(client, 200, "OK", data=open(self.directory + "/" + url, 'rb').read(), content_type=guess_type(url)[0])
            elif url == "index.html":
                self.createHomepage(client)
            else:
                page = None
                self.error("Error 404! %r" % url)
                self.error404(client, url)

            if page:
                self.pages.add(page)

            if (1 + self.options.nb_files) <= len(self.pages) and not self.is_done:
                self.is_done = True
                self.done_at = time() + self.timeout
        except:
            pass

    def createHomepage(self, client):
        self.error("Serve homepage")
        page = HtmlPage()
        page.title = 'Fusil HTTP server'
        page.body = '<h1>Fuzzing</h1>\n'
        #page.body += '<table border="1">\n'
        tr_open = False
        try:
            count = len(self.filenames)
        except:
            count = 0
        session_index = self.project().session_index
        for index in xrange(count):
            url = self.file_url_format % (session_index, index)

            if (index % self.rows) == 0:
                if tr_open:
                    page.body += '  </tr>\n'
                page.body += '  <tr>\n'
                tr_open = True
            span = ''
            if index == (count-1):
                colspan = (index+1) % self.rows
                if colspan:
                    span += ' colspan="%s"' % (self.rows - colspan + 1)
            content = self.file_html_format % {
                'url': url,
                'text': "[%s]" % url,
                'mime': self.content_type}
            page.body += '    %s\n' % (content)
        #page.body += '  </tr>\n'
        #page.body += '</table>\n'
        #page.body += '<p>Created: %s</p>\n' % datetime.now()
        #page.body += '<p>Session: %s</p>\n' % self.project().session_index

        # Write the HTML in a file
        page = str(page)
        filename = self.session().createFilename("index.html")
        with open(filename, 'wb') as fp:
            fp.write(page)

        # Send bytes to the client
        self.serveData(client, 200, "OK", data=page, content_type="text/html")

    def live(self):
        HttpServer.live(self)
        if not self.is_done:
            return
        if time() < self.done_at:
            return
        self.error("DONE")
        self.is_done = False
        self.send('session_stop')

if __name__ == "__main__":
    Fuzzer().main()

